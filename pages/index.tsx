import { gql } from '@apollo/client';
import { config } from '@fortawesome/fontawesome-svg-core';
// The following import prevents a Font Awesome icon server-side rendering bug,
// where the icons flash from a very large icon down to a properly sized one:
import '@fortawesome/fontawesome-svg-core/styles.css';
// Prevent fontawesome from adding its CSS since we did it manually above:
import type { NextPage } from 'next';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import styles from '@styles/Home.module.css';
import graphqlClient from '../graphClient';

config.autoAddCss = false; /* eslint-disable import/first */

type postPreviewContent = {
  html: string;
};

type postPreview = {
  id: string;
  content: postPreviewContent;
};

type IProps = {
  posts: postPreview[];
};

const POSTS = gql`
  query getPosts {
    posts {
      id
      content {
        html
      }
    }
  }
`;

const Home: NextPage<IProps> = ({ posts }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Welcome</h1>
        {posts &&
          posts.map((post: postPreview) => (
            <div key={post.id}>
              <div className="text-container" dangerouslySetInnerHTML={{ __html: post.content.html }} />
              <hr />
            </div>
          ))}
      </main>

      <footer>footer</footer>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  // const { dropId, collectionId } = context.params;
  // Check if dropId exists, if not 404

  // const client = graphqlClient; //
  const { data } = await graphqlClient.query({ query: POSTS });

  return {
    props: data,
  };
};

export default Home;
